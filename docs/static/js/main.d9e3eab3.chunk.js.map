{"version":3,"sources":["components/IonSearchbar.js","components/Header.js","services/ApiRequest.js","components/SongCard.js","components/SongsList.js","SongsApp.js","index.js"],"names":["IonSearchbar","_this$props","this","props","getSearchName","query","react_default","a","createElement","className","htmlFor","type","id","placeholder","onChange","value","Component","Header","favouritesTotal","components_IonSearchbar","fetchSongs","fetch","then","response","json","SongCard","image","trackName","collectionName","favouriteStatus","selectFavourites","favouriteIcon","src","alt","onClick","SongsList","resultsArray","map","item","components_SongCard","key","trackId","artworkUrl100","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getSongs","debounce","state","data","newResultsArray","results","object","objectSpread","checkFavouritesLocalStorage","setState","e","nameValue","currentTarget","_this$state","favArray","buttonValue","newFavArray","toConsumableArray","parseInt","push","favIndex","indexOf","splice","saveFavouritesLS","localStorage","setItem","JSON","stringify","dataArray","savedSongs","parse","getItem","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","_this$state2","length","components_Header","components_SongsList","ReactDOM","render","SongsApp","document","getElementById"],"mappings":"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","file":"static/js/main.d9e3eab3.chunk.js","sourcesContent":["import React, { Component} from 'react';\nimport PropTypes from \"prop-types\";\n\nclass IonSearchbar extends Component {\n    render() {\n        const { getSearchName, query } = this.props;\n\n        return(\n            <div className=\"Search-bar\">\n                <label htmlFor=\"search-field\" className=\"Search-field__label\"></label>\n                <input type=\"text\" id=\"search-field\" className=\"Search-field__input\" placeholder=\"Search\" onChange={getSearchName} value={query}/>   \n\n                <i className=\"material-icons Magnify\">search</i>\n            </div>\n        );\n    }\n}\n\nIonSearchbar.propTypes = {\n    getSearchName: PropTypes.func,\n    query: PropTypes.string\n}\n\nexport default IonSearchbar;\n\n               ","import React, { Component } from 'react';\nimport IonSearchbar from './IonSearchbar';\nimport PropTypes from \"prop-types\";\n\nclass Header extends Component {\n    render() {\n        const { favouritesTotal, getSearchName, query } = this.props;\n\n        return(\n            <header className=\"App-header\">\n                <div className=\"Header__content\">\n                    <i className=\"material-icons Hand-tapping\">touch_app</i>\n        \n                    <IonSearchbar getSearchName={getSearchName}\n                    query={query} />\n\n                    <div className=\"Favourites-counter__container\">\n                        <i className=\"material-icons Header__heart\">favorite</i>\n                        \n                        <span className=\"Favourites__counter\">{favouritesTotal}</span>\n                    </div>\n                </div>\n            </header>\n        );\n    }\n}\n\nHeader.propTypes = {\n    favouritesTotal: PropTypes.number\n}\n\nexport default Header;","const ENDPOINT = \"https://itunes.apple.com/search?term=\";\n\nconst fetchSongs = (query) => fetch(ENDPOINT + query).then(response => response.json());\n\nexport { fetchSongs };","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\n\nclass SongCard extends Component {\n    render() {\n      const { image, trackName, collectionName, favouriteStatus, id, selectFavourites } = this.props;\n\n      const favouriteIcon = favouriteStatus === true ? 'favorite' : 'favorite_border';\n\n      return(\n        <li className=\"Song__item\">\n            <img className=\"Song__sleeve\" src={image} alt={collectionName}></img>\n\n            <div className=\"Card__info\">\n              <p className=\"Song__title\">{trackName}</p>\n\n              <p className=\"Song__album\">{collectionName}</p>\n            </div> \n\n            <button type=\"button\" className=\"Favourites__heart\" value={id} onClick={selectFavourites}><i className=\"material-icons\">{favouriteIcon}</i></button>\n        </li>\n      );\n    }\n}\n\nSongCard.propTypes = {\n  image: PropTypes.string,\n  trackName: PropTypes.string,\n  collectionName: PropTypes.string,\n  selectFavourites: PropTypes.func,\n  id: PropTypes.number,\n  favouriteStatus: PropTypes.bool\n}\n\nexport default SongCard;","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport SongCard from './SongCard';\n\nclass SongsList extends Component {\n    render() {\n        const { resultsArray, selectFavourites } = this.props;\n\n        return(\n            <ul className=\"Songs__list\">\n                {resultsArray.map(item => {\n                    return(\n                        <SongCard key={item.trackId}\n                        id={item.trackId}\n                        image={item.artworkUrl100}\n                        trackName={item.trackName}\n                        collectionName={item.collectionName}\n                        selectFavourites={selectFavourites} \n                        favouriteStatus={item.favouriteStatus} />\n                    )\n                })}\n            </ul>\n        );\n    }\n}\n\nSongsList.propTypes = {\n    resultsArray: PropTypes.array\n}\n\nexport default SongsList;","import React, { Component } from \"react\";\nimport { debounce } from \"lodash\";\nimport Header from \"./components/Header\";\nimport \"./styles/App.scss\";\nimport { fetchSongs } from \"./services/ApiRequest\";\nimport SongsList from \"./components/SongsList\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      favArray: [],\n      resultsArray: [],\n      query: ''\n    };\n  }\n\n  // Check LS When running the component.\n  // If there's data, store it in the state favArray to have the favourite's total when refreshing the app.\n  componentDidMount() {\n    const savedSongs = JSON.parse(localStorage.getItem(\"favSongs\"));\n    if (savedSongs !== null) {\n      this.setState({\n        favArray: savedSongs\n      });\n    }\n  }\n\n  //Use Lodash to debounce the request until search value is introduced:\n  getSongs = debounce(() => {\n    const { query } = this.state;\n\n    fetchSongs(query).then(data => {\n      const newData = data.results;\n\n      //Add the property favouriteStatus to newData array:\n      const newResultsArray = newData.map(object => {\n        return { ...object, favouriteStatus: false };\n      });\n\n      // Check if there are favourite songs in LS\n      this.checkFavouritesLocalStorage(newResultsArray);\n    });\n\n    this.setState({resultsArray: []});\n  }, 1000);\n\n  getSearchName = e => {\n    const nameValue = e.currentTarget.value;\n    this.setState({ query: nameValue });\n\n    this.getSongs();\n  };\n\n  selectFavourites = e => {\n    const { resultsArray, favArray } = this.state;\n    const buttonValue = e.currentTarget.value;\n\n    //Create a copy of the favArray from the state:\n    let newFavArray = [...favArray];\n\n    const newResultsArray = resultsArray.map(item => {\n      if(item.trackId === parseInt(buttonValue) && item.favouriteStatus === false) {\n\n        // Add item's trackId to that copy of the array:\n        newFavArray.push(item.trackId);\n       \n        return {\n          ...item,\n          favouriteStatus: true\n        };\n        \n      } else if(item.trackId === parseInt(buttonValue) && item.favouriteStatus === true) {\n\n        //Search for the item's index through its trackId and remove that position in the array.\n        const favIndex = newFavArray.indexOf(item.trackId);\n        newFavArray.splice(favIndex, 1);\n\n        return {\n          ...item,\n          favouriteStatus: false\n        };\n      }\n      return item;\n    });\n\n    this.setState({ resultsArray: newResultsArray, favArray: newFavArray});\n    \n    // Save the state favourite's array in LS.\n    this.saveFavouritesLS('favSongs', favArray);\n  };\n\n  saveFavouritesLS = (key, value) => {\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  // Check if there are favourites stored in LS:\n  checkFavouritesLocalStorage = data => {\n    const dataArray = data;\n    const savedSongs = JSON.parse(localStorage.getItem('favSongs'));\n\n    // If there's data in LS, go through every element to compare their trackIds with those from the resultsArray.\n    // If they match, change the favouriteStatus to true in the resultsArray:\n\n    if (savedSongs !== null) {\n      for (const item of dataArray) {\n        for (const song of savedSongs) {\n          if(song === parseInt(item.trackId)) {\n            item.favouriteStatus = true;\n          }\n        }\n      }\n    }\n    this.setState({ resultsArray: dataArray });\n  };\n\n  render() {\n    const { resultsArray, favArray } = this.state;\n    const { getSearchName, selectFavourites } = this;\n\n    const favouritesTotal = favArray.length;\n\n    return (\n      <div className=\"App\">\n        <Header\n          getSearchName={getSearchName}\n          favouritesTotal={favouritesTotal}\n        />\n\n        <main className=\"Main-section\">\n          <SongsList\n            resultsArray={resultsArray}\n            selectFavourites={selectFavourites}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport SongsApp from './SongsApp';\n\nReactDOM.render(<SongsApp />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}